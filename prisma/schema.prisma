datasource db {
  provider  = "postgresql"
  // url       = env("PROD_DATABASE_URL")
  // directUrl = env("PROD_DIRECT_URL")
  url       = env("DEV_DATABASE_URL")
  directUrl = env("DEV_DIRECT_URL")
}

generator client {
  // Prisma Python client provider
  provider             = "prisma-client-py"
  // Asynchronous interface to use
  interface            = "asyncio"
  // Recursive type depth not limited (-1)
  recursive_type_depth = -1
}

enum CaseType {
  BAN
  UNBAN
  HACK_BAN
  TEMP_BAN
  KICK
  TIMEOUT
  UNTIMEOUT
  WARN
  JAIL
  UNJAIL
}

model Guild {
  guild_id        BigInt        @id
  guild_joined_at DateTime?     @default(now())
  cases           Case[]
  snippets        Snippet[]
  notes           Note[]
  reminders       Reminder[]
  guild_config    GuildConfig[]

  @@unique([guild_id])
  @@index([guild_id])
}

model GuildConfig {
  guild_prefix String? @default("$")

  guild_mod_log_channel_id     BigInt?
  guild_audit_log_channel_id   BigInt?
  guild_join_log_channel_id    BigInt?
  guild_private_log_channel_id BigInt?
  guild_report_log_channel_id  BigInt?
  guild_dev_log_channel_id     BigInt?

  guild_jail_channel_id      BigInt?
  guild_general_channel_id   BigInt?
  guild_starboard_channel_id BigInt?
  guild_mod_channel_id       BigInt?
  guild_bot_channel_id       BigInt?

  guild_dev_role_id        BigInt?
  guild_admin_role_id      BigInt?
  guild_senior_role_id     BigInt?
  guild_mod_role_id        BigInt?
  guild_junior_role_id     BigInt?
  guild_base_staff_role_id BigInt?

  guild_base_member_role_id BigInt?
  guild_jail_role_id        BigInt?
  guild_quarantine_role_id  BigInt?

  guild_disabled_commands String[] @default([])
  guild_disabled_cogs     String[] @default([])

  guild_id BigInt
  guild    Guild? @relation(fields: [guild_id], references: [guild_id])

  @@unique([guild_id])
  @@index([guild_id])
}

model Case {
  case_id           BigInt    @id @default(autoincrement())
  case_type         CaseType
  case_reason       String
  case_moderator_id BigInt
  case_target_id    BigInt
  case_target_roles BigInt[]  @default([]) // Role IDs for the jailed user
  case_number       Int? // Incremented for each case per guild via a trigger/function
  case_created_at   DateTime? @default(now())
  case_expires_at   DateTime? // For temporary bans and timeouts
  guild_id          BigInt
  guild             Guild     @relation(fields: [guild_id], references: [guild_id])

  @@unique([case_number, guild_id])
  @@index([case_number, guild_id])
}

model Snippet {
  snippet_id         BigInt   @id @default(autoincrement())
  snippet_name       String
  snippet_content    String
  snippet_user_id    BigInt
  snippet_created_at DateTime @default(now())
  guild_id           BigInt
  guild              Guild    @relation(fields: [guild_id], references: [guild_id])

  @@unique([snippet_name, guild_id])
  @@index([snippet_name, guild_id])
}

model Note {
  note_id           BigInt   @id @default(autoincrement())
  note_content      String
  note_created_at   DateTime @default(now())
  note_moderator_id BigInt
  note_target_id    BigInt
  note_number       Int? // Incremented for each note per guild via a trigger/function
  guild_id          BigInt
  guild             Guild    @relation(fields: [guild_id], references: [guild_id])

  @@unique([note_number, guild_id])
  @@index([note_number, guild_id])
}

model Reminder {
  reminder_id         BigInt   @id @default(autoincrement())
  reminder_content    String
  reminder_created_at DateTime @default(now())
  reminder_expires_at DateTime
  reminder_channel_id BigInt // Channel to send the reminder to if direct message fails
  reminder_user_id    BigInt
  guild_id            BigInt
  guild               Guild    @relation(fields: [guild_id], references: [guild_id])

  @@unique([reminder_id, guild_id])
  @@index([reminder_id, guild_id])
}
